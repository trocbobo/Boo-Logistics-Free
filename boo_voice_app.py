import os
import streamlit as st
import pandas as pd
import re
from deepgram import Deepgram

# ===================== CONFIG =====================
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY") or st.secrets["DEEPGRAM_API_KEY"]
dg_client = Deepgram(DEEPGRAM_API_KEY)

st.set_page_config(page_title="Boo Voice Logistics Assistant", page_icon="üé§", layout="centered")
st.title("üé§ Boo Voice Logistics Assistant")

# ===================== UTILS =====================
def normalize_command(text: str) -> str:
    """Chu·∫©n h√≥a c√¢u l·ªánh ti·∫øng Vi·ªát"""
    text = text.lower()
    text = re.sub(r"th√°ng\s*(\d+)", r"T\1", text)   # "th√°ng 6" => "T6"
    mapping = {
        "th√°ng m·ªôt": "T1", "th√°ng hai": "T2", "th√°ng ba": "T3",
        "th√°ng t∆∞": "T4", "th√°ng nƒÉm": "T5", "th√°ng s√°u": "T6",
        "th√°ng b·∫£y": "T7", "th√°ng t√°m": "T8", "th√°ng ch√≠n": "T9",
        "th√°ng m∆∞·ªùi": "T10", "th√°ng m∆∞·ªùi m·ªôt": "T11", "th√°ng m∆∞·ªùi hai": "T12"
    }
    for k,v in mapping.items():
        text = text.replace(k, v)
    return text

def extract_month(command):
    """T√¨m th√°ng trong c√¢u l·ªánh"""
    match = re.search(r"T(\d+)", command)
    if match:
        return int(match.group(1))
    return None

def transcribe_audio(file_path):
    """Nh·∫≠n di·ªán gi·ªçng n√≥i b·∫±ng Deepgram"""
    with open(file_path, "rb") as audio:
        source = {"buffer": audio, "mimetype": "audio/wav"}
        response = dg_client.transcription.sync_prerecorded(
            source,
            {"punctuate": True, "language": "vi"}
        )
    return response["results"]["channels"][0]["alternatives"][0]["transcript"]

# ===================== REPORTS =====================
def generate_revenue_simple(data_file, month):
    df = pd.read_excel(data_file, engine="openpyxl")
    if "Ngay" in df.columns:
        df["Thang"] = pd.to_datetime(df["Ngay"]).dt.month
    else:
        st.warning("‚ö†Ô∏è File Excel ch∆∞a c√≥ c·ªôt 'Ngay'")
        return pd.DataFrame()
    result = df[df["Thang"] == month].groupby("KhachHang")["DoanhThu"].sum().reset_index()
    return result

def generate_cost_report(data_file, month):
    df = pd.read_excel(data_file, engine="openpyxl")
    if "Ngay" in df.columns:
        df["Thang"] = pd.to_datetime(df["Ngay"]).dt.month
    else:
        return pd.DataFrame()
    result = df[df["Thang"] == month].groupby("Vendor")["ChiPhi"].sum().reset_index()
    return result

def generate_container_report(data_file, cont_size):
    df = pd.read_excel(data_file, engine="openpyxl")
    col = f"SL_{cont_size}"
    if col not in df.columns:
        st.warning(f"‚ö†Ô∏è File Excel ch∆∞a c√≥ c·ªôt {col}")
        return pd.DataFrame()
    result = df.groupby("KhachHang")[col].sum().reset_index()
    return result

def generate_lcl_report(data_file):
    df = pd.read_excel(data_file, engine="openpyxl")
    if "SL_LCL" not in df.columns:
        st.warning("‚ö†Ô∏è File Excel ch∆∞a c√≥ c·ªôt SL_LCL")
        return pd.DataFrame()
    result = df.groupby("KhachHang")["SL_LCL"].sum().reset_index()
    return result

def generate_summary_report(data_file):
    df = pd.read_excel(data_file, engine="openpyxl")
    if not {"DoanhThu","ChiPhi"}.issubset(df.columns):
        st.warning("‚ö†Ô∏è File Excel ch∆∞a c√≥ c·ªôt DoanhThu ho·∫∑c ChiPhi")
        return pd.DataFrame()
    result = df.groupby("KhachHang")[["DoanhThu", "ChiPhi"]].sum().reset_index()
    result["LoiNhuan"] = result["DoanhThu"] - result["ChiPhi"]
    return result

# ===================== COMMAND HANDLER =====================
def handle_command(command, data_file):
    if "doanh thu" in command:
        month = extract_month(command)
        if month:
            return generate_revenue_simple(data_file, month)
    elif "chi ph√≠" in command:
        month = extract_month(command)
        if month:
            return generate_cost_report(data_file, month)
    elif "container" in command:
        if "20" in command:
            return generate_container_report(data_file, 20)
        elif "40" in command:
            return generate_container_report(data_file, 40)
    elif "lcl" in command:
        return generate_lcl_report(data_file)
    elif "t·ªïng h·ª£p" in command or "hi·ªáu su·∫•t" in command:
        return generate_summary_report(data_file)
    return pd.DataFrame({"Th√¥ng b√°o": ["‚ö†Ô∏è Ch∆∞a hi·ªÉu l·ªánh, vui l√≤ng th·ª≠ l·∫°i."]})

# ===================== UI =====================
uploaded_audio = st.file_uploader("üé§ Upload file ghi √¢m (.wav)", type=["wav"])
uploaded_excel = st.file_uploader("üìä Upload file Excel d·ªØ li·ªáu", type=["xlsx"])

if uploaded_audio and uploaded_excel:
    # L∆∞u file audio t·∫°m
    audio_path = os.path.join("/tmp", uploaded_audio.name)
    with open(audio_path, "wb") as f:
        f.write(uploaded_audio.getbuffer())

    # B·∫Øt bu·ªôc WAV
    if not audio_path.endswith(".wav"):
        st.error("‚ö†Ô∏è Ch·ªâ h·ªó tr·ª£ file WAV. Vui l√≤ng convert file ghi √¢m tr∆∞·ªõc khi upload.")
        st.stop()

    # Ph√°t l·∫°i audio
    st.audio(audio_path)

    # Nh·∫≠n di·ªán gi·ªçng n√≥i
    st.write("‚è≥ ƒêang nh·∫≠n di·ªán gi·ªçng n√≥i...")
    try:
        transcript = transcribe_audio(audio_path)
        st.success(f"üìù N·ªôi dung: {transcript}")

        # Chu·∫©n h√≥a c√¢u l·ªánh
        command = normalize_command(transcript)

        # X·ª≠ l√Ω l·ªánh
        reports = handle_command(command, uploaded_excel)

        st.subheader("üìä K·∫øt qu·∫£ b√°o c√°o:")
        st.dataframe(reports)

        # Xu·∫•t file Excel
        output_path = "/tmp/bao_cao.xlsx"
        reports.to_excel(output_path, index=False)
        with open(output_path, "rb") as f:
            st.download_button("‚¨áÔ∏è T·∫£i b√°o c√°o Excel", f, file_name="bao_cao.xlsx")

    except Exception as e:
        st.error(f"L·ªói Deepgram: {e}")
