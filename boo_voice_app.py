import streamlit as st
import pandas as pd
import requests
import mimetypes
import osimport os
import streamlit as st
import pandas as pd
import requests

# =====================
# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
# =====================
DEFAULT_DATA_FILE = "data/OTM_MASTER_DATA.xlsx"
DEEPGRAM_API_KEY = st.secrets.get("DEEPGRAM_API_KEY", "")

# =====================
# H√†m g·ªçi Deepgram API
# =====================
def transcribe_audio(file_path):
    url = "https://api.deepgram.com/v1/listen"
    headers = {"Authorization": f"Token {DEEPGRAM_API_KEY}"}

    with open(file_path, "rb") as f:
        response = requests.post(
            url, headers=headers, files={"file": f}, data={"model": "nova-2", "language": "vi"}
        )

    if response.status_code == 200:
        return response.json()["results"]["channels"][0]["alternatives"][0]["transcript"]
    else:
        st.error(f"L·ªói Deepgram: {response.text}")
        return ""

# =====================
# H√†m x·ª≠ l√Ω d·ªØ li·ªáu Excel
# =====================
def generate_revenue_simple(data_file, month):
    df = pd.read_excel(data_file)

    if "Th√°ng" not in df.columns or "Doanh thu" not in df.columns:
        return pd.DataFrame({"L·ªói": ["Thi·∫øu c·ªôt 'Th√°ng' ho·∫∑c 'Doanh thu' trong file d·ªØ li·ªáu"]})

    df_month = df[df["Th√°ng"] == month]
    summary = df_month.groupby("Kh√°ch h√†ng")["Doanh thu"].sum().reset_index()
    return summary

# =====================
# X·ª≠ l√Ω l·ªánh t·ª´ gi·ªçng n√≥i
# =====================
def handle_command(command, data_file):
    command = command.lower()
    if "doanh thu" in command and "th√°ng s√°u" in command:
        return generate_revenue_simple(data_file, 6)
    elif "doanh thu" in command and "th√°ng b·∫£y" in command:
        return generate_revenue_simple(data_file, 7)
    else:
        return pd.DataFrame({"Th√¥ng b√°o": ["Ch∆∞a hi·ªÉu l·ªánh, vui l√≤ng th·ª≠ l·∫°i."]})

# =====================
# H√†m l·∫•y file Excel (upload ho·∫∑c m·∫∑c ƒë·ªãnh)
# =====================
def get_data_file(uploaded_file):
    if uploaded_file is not None:
        file_path = os.path.join("/tmp", uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        return file_path
    else:
        return DEFAULT_DATA_FILE

# =====================
# Giao di·ªán Streamlit
# =====================
st.set_page_config(page_title="Boo Voice Logistics Assistant", layout="centered")

st.title("üé§ Boo Voice Logistics Assistant")

uploaded_audio = st.file_uploader("Upload file ghi √¢m (MP3, WAV, M4A)", type=["mp3", "wav", "m4a"])
uploaded_excel = st.file_uploader("Upload file Excel d·ªØ li·ªáu", type=["xlsx"])

if uploaded_audio:
    # L∆∞u file ghi √¢m
    audio_path = os.path.join("/tmp", uploaded_audio.name)
    with open(audio_path, "wb") as f:
        f.write(uploaded_audio.getbuffer())

    st.audio(audio_path)

    st.write("‚è≥ ƒêang nh·∫≠n di·ªán gi·ªçng n√≥i...")
    transcript = transcribe_audio(audio_path)
    st.success(f"üìù N·ªôi dung: {transcript}")

    # L·∫•y file Excel (upload ho·∫∑c m·∫∑c ƒë·ªãnh)
    data_file = get_data_file(uploaded_excel)

    # X·ª≠ l√Ω l·ªánh v√† t·∫°o b√°o c√°o
    reports = handle_command(transcript, data_file)

    st.write("üìä K·∫øt qu·∫£ b√°o c√°o:")
    st.dataframe(reports)

    # Xu·∫•t Excel k·∫øt qu·∫£
    output_path = "/tmp/bao_cao.xlsx"
    reports.to_excel(output_path, index=False)

    with open(output_path, "rb") as f:
        st.download_button("‚¨áÔ∏è T·∫£i b√°o c√°o Excel", f, "bao_cao.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")


DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
url = "https://api.deepgram.com/v1/listen"

# --- Nh·∫≠n di·ªán gi·ªçng n√≥i ---
def transcribe_audio(file_path):
    mime_type, _ = mimetypes.guess_type(file_path)
    if not mime_type:
        mime_type = "audio/mpeg"

    headers = {"Authorization": f"Token {DEEPGRAM_API_KEY}", "Content-Type": mime_type}
    params = {"model": "nova-2", "language": "vi"}

    with open(file_path, "rb") as f:
        response = requests.post(url, headers=headers, params=params, data=f)

    return response.json()

# --- B√°o c√°o doanh thu (b·∫£n ƒë∆°n gi·∫£n) ---
def generate_revenue_simple(data_file, month):
    df = pd.read_excel(data_file)
    df["Th√°ng"] = pd.to_datetime(df["Ng√†y"], errors="coerce").dt.month
    report = df[df["Th√°ng"] == month].groupby("Kh√°ch h√†ng")["T·ªïng VND"].sum().reset_index()
    out = f"Bao_cao_doanh_thu_T{month}_simple.xlsx"
    report.to_excel(out, index=False)
    return out

# --- B√°o c√°o doanh thu (b·∫£n n√¢ng c·∫•p theo m·∫´u anh g·ª≠i) ---
def generate_revenue_detailed(data_file, month):
    df = pd.read_excel(data_file)
    df["Th√°ng"] = pd.to_datetime(df["Ng√†y"], errors="coerce").dt.month
    df_month = df[df["Th√°ng"] == month]

    # Gom theo kh√°ch h√†ng + lo·∫°i cont
    report = df_month.groupby(["Kh√°ch h√†ng", "Lo·∫°i cont"]).agg({
        "S·ªë l∆∞·ª£ng": "sum",
        "T·ªïng VND": "sum",
        "T·ªîNG (VC+PS)": "sum"
    }).reset_index()

    # Xu·∫•t ra Excel v·ªõi nhi·ªÅu sheet
    out = f"Bao_cao_doanh_thu_T{month}_detailed.xlsx"
    with pd.ExcelWriter(out, engine="openpyxl") as writer:
        report.to_excel(writer, sheet_name="Chi ti·∫øt theo cont", index=False)
        df_month.groupby("Kh√°ch h√†ng")["T·ªïng VND"].sum().reset_index().to_excel(writer, sheet_name="T·ªïng h·ª£p KH", index=False)

    return out

# --- X·ª≠ l√Ω transcript ---
def handle_command(transcript, data_file):
    transcript = transcript.lower()
    if "doanh thu" in transcript and "th√°ng s√°u" in transcript:
        simple = generate_revenue_simple(data_file, 6)
        detailed = generate_revenue_detailed(data_file, 6)
        return [simple, detailed]
    return []

# --- Giao di·ªán Streamlit ---
st.title("üé§ Boo Voice Logistics Assistant")

uploaded_audio = st.file_uploader("Upload file ghi √¢m (MP3, WAV, M4A)", type=["mp3", "wav", "m4a"])
uploaded_excel = st.file_uploader("Upload file Excel d·ªØ li·ªáu", type=["xlsx"])

if uploaded_audio and uploaded_excel:
    file_path = os.path.join("/tmp", uploaded_audio.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_audio.getbuffer())
    st.audio(file_path)

    st.write("‚è≥ ƒêang nh·∫≠n di·ªán gi·ªçng n√≥i...")
    result = transcribe_audio(file_path)

    if "results" in result:
        transcript = result["results"]["channels"][0]["alternatives"][0]["transcript"]
        st.success(f"üìù N·ªôi dung: {transcript}")

        reports = handle_command(transcript, uploaded_excel)
        for r in reports:
            with open(r, "rb") as f:
                st.download_button(f"‚¨áÔ∏è T·∫£i {r}", f, file_name=r)
    else:
        st.error("‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i.")
